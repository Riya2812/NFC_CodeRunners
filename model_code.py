# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SttNo_AqxkwJEZ9qePHOyB_us6PQ4U3a
"""

# importing the dependicies
from sklearn.metrics import accuracy_score  # to find the accuracy of each model
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import ExtraTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
import pandas as pd
import numpy as np
import seaborn as sns  # for visvualizing the data
import matplotlib.pyplot as plt
import pickle
# for training and testing the data
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler  # to scale the features
# for performing data standardiation
from sklearn.preprocessing import StandardScaler

food_data = pd.read_csv('clean_nutrients1.csv')

food_data.head()


food_data.shape

food_data.info()

food_data.isnull().sum()

food_data['Category'] = food_data['Category'].str.strip()

food_data['Category'].unique()


food_dict = {
    'Breads, cereals, fastfood,grains': 1,
    'Meat, Poultry': 2,
    'Desserts, sweets': 3,
    'Dairy products': 4,
    'Vegetables A-E': 5,
    'Vegetables R-Z': 6,
    'Fruits G-P': 7,
    'Fruits A-F': 8,
    'Fish, Seafood': 9,
    'Fats, Oils, Shortenings': 10,
    'Vegetables F-P': 11,
    'Seeds and Nuts': 12,
    'Drinks,Alcohol, Beverages': 13,
    'Soups': 14,
    'Fruits R-Z': 15,
    'Jams,Jellies': 16
}

# Convert NaN values to a specific integer (e.g., 0)
food_data['Category'].fillna('Unknown', inplace=True)

# Replace non-integer values with 'Unknown' and map to integers
food_data['Category'] = food_data['Category'].map(
    food_dict).fillna(0).astype(int)
food_data.rename(columns={'Category': 'food_num'},
                 inplace=True)  # Rename the column

food_data['food_num'].value_counts()

food_data.head()


# food_data.drop('Category',axis=1,inplace=True) #axis=1 is to drop a column and inplace =True makes permenant changes in the dataset

food_data.drop('Food', axis=1, inplace=True)

food_data.head()

x = food_data.drop('food_num', axis=1)
y = food_data['food_num']

y

y.head()

x.shape

y.shape

x_train, x_test, y_train, y_test = train_test_split(
    x, y, test_size=0.2, random_state=20)

x_train.shape

x_test.shape

ms = MinMaxScaler()

x_train = ms.fit_transform(x_train)
x_test = ms.transform(x_test)

sc = StandardScaler()


sc.fit(x_train)
x_train = sc.transform(x_train)
x_test = sc.transform(x_test)

sc = StandardScaler()


sc.fit(x_train)
x_train = sc.transform(x_train)
x_test = sc.transform(x_test)

y_train.isnull().sum()

models = {
    'Logistic Regression': LogisticRegression(),
    'Naive Bayes': GaussianNB(),
    'Support Vector Machine': SVC(),
    'K-Nearest Neighbors': KNeighborsClassifier(),
    'Decision Tree': DecisionTreeClassifier(),
    'Random Forest': RandomForestClassifier(),
    'Bagging': BaggingClassifier(),
    'AdaBoost': AdaBoostClassifier(),
    'Gradient Boosting': GradientBoostingClassifier(),
    'Extra Trees': ExtraTreeClassifier(),
}


for name, md in models.items():
    md.fit(x_train, y_train)
    ypred = md.predict(x_test)

    print(f"{name}  with accuracy : {accuracy_score(y_test,ypred)}")

bc = BaggingClassifier()
bc.fit(x_train, y_train)
ypred = bc.predict(x_test)
accuracy_score(y_test, ypred)


def food_recommendation_bagging(Measure, Grams, Calories, Protein, Fat, Sat_Fat, Fiber, Carbs, model):
    input_data = pd.DataFrame({
        'Measure': [Measure],
        'Grams': [Grams],
        'Calories': [Calories],
        'Protein': [Protein],
        'Fat': [Fat],
        'Sat.Fat': [Sat_Fat],
        'Fiber': [Fiber],
        'Carbs': [Carbs]
    })

    food_category = model.predict(input_data)

    return food_category[0]


# Input data for food recommendation
Measure = 0.25
Grams = 0.094552929
Calories = 0.519153226
Protein = 0.120171674
Fat = 0.120171674
Sat_Fat = 0.102564103
Fiber = 0.0
Carbs = 0.165254237

# Replace 'bc' with your Bagging Classifier model
food_predict = food_recommendation_bagging(
    Measure, Grams, Calories, Protein, Fat, Sat_Fat, Fiber, Carbs, bc)

food_dict = {
    1: 'Breads, cereals, fastfood,grains (e.g., bread, rice, pasta)',
    2: 'Meat, Poultry (e.g., chicken, beef, pork)',
    3: 'Desserts, sweets (e.g., cookies, cakes, candies)',
    4: 'Dairy products (e.g., milk, cheese, yogurt)',
    5: 'Vegetables A-E (e.g., asparagus, broccoli, carrots)',
    6: 'Vegetables R-Z (e.g., radishes, zucchini, squash)',
    7: 'Fruits G-P (e.g., grapes, oranges, peaches)',
    8: 'Fruits A-F (e.g., apples, bananas, cherries)',
    9: 'Fish, Seafood (e.g., salmon, shrimp, tuna)',
    10: 'Fats, Oils, Shortenings (e.g., butter, olive oil, lard)',
    11: 'Vegetables F-P (e.g., fennel, lettuce, peppers)',
    12: 'Seeds and Nuts (e.g., almonds, peanuts, sunflower seeds)',
    13: 'Drinks,Alcohol, Beverages (e.g., water, soda, wine)',
    14: 'Soups (e.g., chicken soup, tomato soup, vegetable soup)',
    15: 'Fruits R-Z (e.g., raspberries, strawberries, watermelon)',
    16: 'Jams,Jellies (e.g., strawberry jam, grape jelly, marmalade)'
}

if food_predict in food_dict:
    print(food_predict)
    recommended_food_category = food_dict[food_predict]
    print(f"The recommended food category is: {recommended_food_category}")
else:
    print("Sorry, we are not able to recommend a proper food category for this environment.")

with open('food_recommendation_model.pkl', 'wb') as model_file:
    pickle.dump(bc, model_file)
model_file.close()
